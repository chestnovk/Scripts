#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
cdrom
# Use graphical install
cmdline
# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

#up2date

# Root password
rootpw 1qazXSW@
# SELinux configuration
selinux --disabled
# System services
services --enabled="chronyd"
# System timezone
timezone Europe/Moscow --isUtc
# Firewall configuration
firewall --enabled
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
autopart --type=lvm
cep --agree

#We don't register a node in VAMN or UI it's not clear for now how to obtain tokens and how to make sure that VAMN already installed.

# Partition clearing information
clearpart --all --initlabel --drives=sda --disklabel=gpt

%include /tmp/pre-include

#Power-off the machine we need this to check if the installation finish successfully
shutdown

%pre
#!/bin/bash
touch /tmp/pre-include
# I provide the following variables through cmdline:
# <qemu:arg value='
# -kernel /home/kchestnov/create_vm/mounts/CentOS-7-x86_64-Minimal-1810/images/pxeboot/vmlinuz 
# -initrd /home/kchestnov/create_vm/mounts/CentOS-7-x86_64-Minimal-1810/images/pxeboot/initrd.img  
# -append inst.stage2=hd:LABEL=CentOS-7-x86_64-Minimal-1810 
# hostname=do-you-really-need-a-hostname 
# ks_device=eth0 
# public_ip=192.168.200.10 
# public_mask=255.255.252.0 
# public_gw=172.16.56.1 
# public_dns=10.30.0.27 
# ks=https://172.16.56.80/ks/example.cfg 
# includes_va=False 
# va_ip= 
# includes_storage_ui=False 
# storage_ui_ip= 
# private_ip= 
# private_mask=255.255.255.0'/>

export `cat /proc/cmdline`

# Assign an $public_ip to the $ks_device
echo "network  --bootproto=static --device=$ks_device --gateway=172.16.56.1 --ip=$public_ip --nameserver=$public_dns --netmask=$public_mask --noipv6 --activate" >> /tmp/pre-include

# Check for backend network
if [ "$private_ip" ]; then
	echo "network  --bootproto=static --device=eth1 --ip=$private_ip --netmask=$private_mask --noipv6 --activate" >> /tmp/pre-include
fi
	
if [ "$includes_va" == True ]; then
	echo "container --ip=$va_ip --special=va-mn --hostname=vamn-${hostname}.vz --rootpw=3628800bkmZ" >> /tmp/pre-include
	echo "register_vaagent --mn_addr=$va_ip --rootpw=1qazXSW@" >> /tmp/pre-include
fi

if [ "includes_storage_ui == True ]; then
	echo "container --ip=$storage_ui_ip --special=vstorage-ui --hostname=ui-${hostname}.vz --rootpw=3628800bkmZ" >> tmp/pre-include
	echo "register_vstorage_ui --ui_addr=$storage_ui_ip" >> /tmp/pre-include
fi


if [ "$va_register" == "True" ]; then
	echo "register_vaagent --mn_addr=$va_ip --rootpw=1qazXSW@" >> /tmp/pre-include
fi
if [ "$storage_ui_register" == "True" ]; then
	if [ -z ${token+x} ]; then
		echo "register_vstorage_ui --ui_addr=$storage_ui_ip --token=$token" >> /tmp/pre-include
	fi
fi



%end

%packages
@^cloudserver
@base
@core
@ps
@qemu
@clustering
@templates
@vstorage
@vz
chrony
kexec-tools
%end



%addon com_virtuozzo_eula

%end
%addon com_virtuozzo_vstorage

%end
%addon com_virtuozzo_vautomator

%end
%addon com_virtuozzo_license

%end
%addon com_virtuozzo_readykernel

%end
%addon com_redhat_kdump --enable --reserve-mb='auto'

%end
%addon com_virtuozzo_legacy_vstorage

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
